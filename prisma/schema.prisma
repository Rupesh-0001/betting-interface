// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  credits       Int       @default(100)
  accounts      Account[]
  sessions      Session[]
  bets          Bet[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Round {
  id          String   @id @default(cuid())
  title       String
  description String?
  optionA     String
  optionB     String
  isActive    Boolean  @default(true)
  winner      String?  // 'A' or 'B'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bets        Bet[]

  @@map("rounds")
}

model Bet {
  id       String @id @default(cuid())
  userId   String
  roundId  String
  option   String // 'A' or 'B'
  amount   Int
  payout   Int?   // Calculated after round completion
  createdAt DateTime @default(now())
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  round Round @relation(fields: [roundId], references: [id], onDelete: Cascade)

  @@unique([userId, roundId])
  @@map("bets")
}
