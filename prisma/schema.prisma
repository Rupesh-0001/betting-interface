// Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  name String?
  image String?
  emailVerified DateTime?
  credits Int @default(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts Account[]
  sessions Session[]
  bets Bet[]
}

model Account {
  id String @id @default(cuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String?
  access_token String?
  expires_at Int?
  token_type String?
  scope String?
  id_token String?
  session_state String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(cuid())
  sessionToken String @unique
  userId String
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token String @unique
  expires DateTime
  @@unique([identifier, token])
}

model Round {
  id String @id @default(cuid())
  title String
  description String?
  optionA String @default("Option A")
  optionB String @default("Option B")
  status String @default("ACTIVE")
  winner String?
  totalPoolA Int @default(0)
  totalPoolB Int @default(0)
  startTime DateTime @default(now())
  endTime DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bets Bet[]
}

model Bet {
  id String @id @default(cuid())
  userId String
  roundId String
  option String
  amount Int
  payout Int?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  round Round @relation(fields: [roundId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@unique([userId, roundId])
}